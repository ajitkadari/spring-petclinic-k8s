server:
  port: 8082
  # graceful shutdown makes sure we have time to finnish any ongoing rest requests before terminating
  # default value will be 30s before terminating
  shutdown: graceful

spring:
  application:
    name: customers-service

# For Exemplars to work we need histogram buckets
# management.metrics.distribution.percentiles-histogram.http.server.requests=true

management:
  server:
    port: 9101
  health:
    probes:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health, info, prometheus
  otlp:
    tracing:
      endpoint: http://localhost:4318/v1/traces
    metrics:
      export:
        url: http://localhost:4318/v1/metrics
        step: 5s
  metrics:
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
  tracing:
    sampling:
      probability: 1.0
  observations:
    enable:
      spring:
        security: false

otel:
  logs:
    exporter:
      enabled: true
    endpoint: http://localhost:3100/loki/api/v1/push

spring:
  datasource:
    initialization-mode: always
    schema: classpath*:db/hsqldb/schema.sql
    data: classpath*:db/hsqldb/data.sql
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: none
  zipkin:
    enabled: true

# traceID and spanId are predefined MDC keys - we want the logs to include them
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
logging.include-application-name=false

logging.level:
  org.springframework: DEBUG
  org.springframework.jdbc.core: TRACE
  io.micrometer.observation: TRACE

---
spring:
  profiles: mysql
  datasource:
    schema: classpath*:db/mysql/schema.sql
    data: classpath*:db/mysql/data.sql